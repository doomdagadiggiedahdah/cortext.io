// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package integralmass.aa_cortext_io_linux_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.concept_sqlite;
import routines.concept;
import routines.Relational;
import routines.Mathematical;
import routines.sentence_subj_v2;
import routines.sentence_subj_linux;
import routines.sentence_format;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.sentence_subj;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.syn_summary;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: AA_cortext_io_linux Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class AA_cortext_io_linux implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(EMAIL != null){
				
					this.setProperty("EMAIL", EMAIL.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String EMAIL;
public String getEMAIL(){
	return this.EMAIL;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "AA_cortext_io_linux";
	private final String projectName = "INTEGRALMASS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				AA_cortext_io_linux.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(AA_cortext_io_linux.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tSystem_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSystem_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputRaw_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParseRecordSet_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParseRecordSet_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tParseRecordSet_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputRaw_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tNormalize_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSystem_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputRaw_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tSystem_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSystem_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSystem_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSystem_1", false);
		start_Hash.put("tSystem_1", System.currentTimeMillis());
		
	
	currentComponent="tSystem_1";

	
		int tos_count_tSystem_1 = 0;
		

Runtime runtime_tSystem_1 = Runtime.getRuntime();

String[] env_tSystem_1= null;
java.util.Map<String,String> envMap_tSystem_1= System.getenv();
java.util.Map<String,String> envMapClone_tSystem_1= new java.util.HashMap();
envMapClone_tSystem_1.putAll(envMap_tSystem_1);

	
final Process ps_tSystem_1 = runtime_tSystem_1.exec( "./create_cortext_io_db.sh" ,env_tSystem_1,new java.io.File("/home/ec2-user/cortext_io/cortext_io_db"));

globalMap.remove("tSystem_1_OUTPUT");
globalMap.remove("tSystem_1_ERROROUTPUT");

Thread normal_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getInputStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.out.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
globalMap.put("tSystem_1_ERROR_MESSAGE",ioe.getMessage());
			
			ioe.printStackTrace();
		}
	}
};
normal_tSystem_1.start();

Thread error_tSystem_1 = new Thread() {
	public void run() {
		try {
			java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tSystem_1.getErrorStream()));
			String line = "";
			try {
				while((line = reader.readLine()) != null) {
					
					System.err.println(line);
				}
			} finally {
				reader.close();
			}
		} catch(java.io.IOException ioe) {
globalMap.put("tSystem_1_ERROR_MESSAGE",ioe.getMessage());
			
			ioe.printStackTrace();
		}
	}
};
error_tSystem_1.start();
if(ps_tSystem_1.getOutputStream()!=null){
    ps_tSystem_1.getOutputStream().close();
}
ps_tSystem_1.waitFor();
normal_tSystem_1.join();
error_tSystem_1.join();


 



/**
 * [tSystem_1 begin ] stop
 */
	
	/**
	 * [tSystem_1 main ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	


 


	tos_count_tSystem_1++;

/**
 * [tSystem_1 main ] stop
 */
	
	/**
	 * [tSystem_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_begin ] stop
 */
	
	/**
	 * [tSystem_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 process_data_end ] stop
 */
	
	/**
	 * [tSystem_1 end ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

globalMap.put("tSystem_1_EXIT_VALUE", ps_tSystem_1.exitValue());

 

ok_Hash.put("tSystem_1", true);
end_Hash.put("tSystem_1", System.currentTimeMillis());




/**
 * [tSystem_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSystem_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSystem_1 finally ] start
	 */

	

	
	
	currentComponent="tSystem_1";

	

 



/**
 * [tSystem_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSystem_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		


	
		String url_tDBConnection_1 = "jdbc:sqlite:" + "/" + "/home/ec2-user/cortext_io/cortext_io_db/cortext_io.db"; 
	String dbUser_tDBConnection_1 = null;
	
	
		String dbPwd_tDBConnection_1 = null;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
					String driverClass_tDBConnection_1 = "org.sqlite.JDBC";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
		conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}


 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputRaw_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String WORD_CONTENT;

				public String getWORD_CONTENT () {
					return this.WORD_CONTENT;
				}
				
			    public Integer WORD_ORDER;

				public Integer getWORD_ORDER () {
					return this.WORD_ORDER;
				}
				
			    public Integer SYN_ID;

				public Integer getSYN_ID () {
					return this.SYN_ID;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer WORD_ID;

				public Integer getWORD_ID () {
					return this.WORD_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.WORD_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.WORD_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.WORD_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.WORD_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WORD_CONTENT="+WORD_CONTENT);
		sb.append(",WORD_ORDER="+String.valueOf(WORD_ORDER));
		sb.append(",SYN_ID="+String.valueOf(SYN_ID));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",WORD_ID="+String.valueOf(WORD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String WORD_CONTENT;

				public String getWORD_CONTENT () {
					return this.WORD_CONTENT;
				}
				
			    public Integer WORD_ORDER;

				public Integer getWORD_ORDER () {
					return this.WORD_ORDER;
				}
				
			    public Integer SYN_ID;

				public Integer getSYN_ID () {
					return this.SYN_ID;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer WORD_ID;

				public Integer getWORD_ID () {
					return this.WORD_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.WORD_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.WORD_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.WORD_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.WORD_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WORD_CONTENT="+WORD_CONTENT);
		sb.append(",WORD_ORDER="+String.valueOf(WORD_ORDER));
		sb.append(",SYN_ID="+String.valueOf(SYN_ID));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",WORD_ID="+String.valueOf(WORD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String WORD_CONTENT;

				public String getWORD_CONTENT () {
					return this.WORD_CONTENT;
				}
				
			    public Integer WORD_ORDER;

				public Integer getWORD_ORDER () {
					return this.WORD_ORDER;
				}
				
			    public Integer SYN_ID;

				public Integer getSYN_ID () {
					return this.SYN_ID;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public int WORD_ID;

				public int getWORD_ID () {
					return this.WORD_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WORD_CONTENT="+WORD_CONTENT);
		sb.append(",WORD_ORDER="+String.valueOf(WORD_ORDER));
		sb.append(",SYN_ID="+String.valueOf(SYN_ID));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",WORD_ID="+String.valueOf(WORD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ResultKey;

				public Object getResultKey () {
					return this.ResultKey;
				}
				
			    public String WORD_CONTENT;

				public String getWORD_CONTENT () {
					return this.WORD_CONTENT;
				}
				
			    public Integer WORD_ORDER;

				public Integer getWORD_ORDER () {
					return this.WORD_ORDER;
				}
				
			    public Integer SYN_ID;

				public Integer getSYN_ID () {
					return this.SYN_ID;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public int WORD_ID;

				public int getWORD_ID () {
					return this.WORD_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.WORD_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.WORD_ID != other.WORD_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ResultKey = this.ResultKey;
	            other.WORD_CONTENT = this.WORD_CONTENT;
	            other.WORD_ORDER = this.WORD_ORDER;
	            other.SYN_ID = this.SYN_ID;
	            other.SENT_ID = this.SENT_ID;
	            other.WORD_ID = this.WORD_ID;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.WORD_ID = this.WORD_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResultKey="+String.valueOf(ResultKey));
		sb.append(",WORD_CONTENT="+WORD_CONTENT);
		sb.append(",WORD_ORDER="+String.valueOf(WORD_ORDER));
		sb.append(",SYN_ID="+String.valueOf(SYN_ID));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",WORD_ID="+String.valueOf(WORD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.WORD_ID, other.WORD_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out25Struct implements routines.system.IPersistableRow<out25Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String WORD_CONTENT;

				public String getWORD_CONTENT () {
					return this.WORD_CONTENT;
				}
				
			    public Integer WORD_ORDER;

				public Integer getWORD_ORDER () {
					return this.WORD_ORDER;
				}
				
			    public Integer SYN_ID;

				public Integer getSYN_ID () {
					return this.SYN_ID;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public int WORD_ID;

				public int getWORD_ID () {
					return this.WORD_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.WORD_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out25Struct other = (out25Struct) obj;
		
						if (this.WORD_ID != other.WORD_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out25Struct other) {

		other.WORD_CONTENT = this.WORD_CONTENT;
	            other.WORD_ORDER = this.WORD_ORDER;
	            other.SYN_ID = this.SYN_ID;
	            other.SENT_ID = this.SENT_ID;
	            other.WORD_ID = this.WORD_ID;
	            
	}

	public void copyKeysDataTo(out25Struct other) {

		other.WORD_ID = this.WORD_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.WORD_CONTENT = readString(dis);
					
						this.WORD_ORDER = readInteger(dis);
					
						this.SYN_ID = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
			        this.WORD_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.WORD_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.WORD_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SYN_ID,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// int
				
		            	dos.writeInt(this.WORD_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("WORD_CONTENT="+WORD_CONTENT);
		sb.append(",WORD_ORDER="+String.valueOf(WORD_ORDER));
		sb.append(",SYN_ID="+String.valueOf(SYN_ID));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",WORD_ID="+String.valueOf(WORD_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.WORD_ID, other.WORD_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class WordsStruct implements routines.system.IPersistableRow<WordsStruct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(WordsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class FormattedSentenceStruct implements routines.system.IPersistableRow<FormattedSentenceStruct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final FormattedSentenceStruct other = (FormattedSentenceStruct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(FormattedSentenceStruct other) {

		other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.DOC_ID = this.DOC_ID;
	            
	}

	public void copyKeysDataTo(FormattedSentenceStruct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(FormattedSentenceStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.DOC_ID = this.DOC_ID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out12Struct other = (out12Struct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out12Struct other) {

		other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.DOC_ID = this.DOC_ID;
	            
	}

	public void copyKeysDataTo(out12Struct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OutSentStruct implements routines.system.IPersistableRow<OutSentStruct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final OutSentStruct other = (OutSentStruct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(OutSentStruct other) {

		other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.DOC_ID = this.DOC_ID;
	            other.IDENTITY = this.IDENTITY;
	            
	}

	public void copyKeysDataTo(OutSentStruct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",IDENTITY="+IDENTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OutSentStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Object ResultKey;

				public Object getResultKey () {
					return this.ResultKey;
				}
				
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.ResultKey = this.ResultKey;
	            other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResultKey="+String.valueOf(ResultKey));
		sb.append(",SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out24Struct implements routines.system.IPersistableRow<out24Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out24Struct other = (out24Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out24Struct other) {

		other.SENT_CONTENT = this.SENT_CONTENT;
	            other.SENT_ORDER = this.SENT_ORDER;
	            other.SENT_ID = this.SENT_ID;
	            other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            
	}

	public void copyKeysDataTo(out24Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            other.input = this.input;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            other.input = this.input;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            other.input = this.input;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.DOC_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out5Struct other = (out5Struct) obj;
		
						if (this.DOC_ID != other.DOC_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out5Struct other) {

		other.IDENTITY = this.IDENTITY;
	            other.DOC_ID = this.DOC_ID;
	            other.input = this.input;
	            
	}

	public void copyKeysDataTo(out5Struct other) {

		other.DOC_ID = this.DOC_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOC_ID, other.DOC_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public int DOC_ID;

				public int getDOC_ID () {
					return this.DOC_ID;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
			        this.DOC_ID = dis.readInt();
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// int
				
		            	dos.writeInt(this.DOC_ID);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public Object ResultKey;

				public Object getResultKey () {
					return this.ResultKey;
				}
				
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.IDENTITY = readString(dis);
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.ResultKey = (Object) dis.readObject();
					
					this.IDENTITY = readString(dis);
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ResultKey);
					
					// String
				
						writeString(this.IDENTITY,dos);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ResultKey="+String.valueOf(ResultKey));
		sb.append(",IDENTITY="+IDENTITY);
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out23Struct implements routines.system.IPersistableRow<out23Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String IDENTITY;

				public String getIDENTITY () {
					return this.IDENTITY;
				}
				
			    public String input;

				public String getInput () {
					return this.input;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.IDENTITY = readString(dis);
					
					this.input = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.IDENTITY,dos);
					
					// String
				
						writeString(this.input,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("IDENTITY="+IDENTITY);
		sb.append(",input="+input);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public Object content;

				public Object getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.content = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.content = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public Object content;

				public Object getContent () {
					return this.content;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.content = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
						this.content = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.content);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("content="+String.valueOf(content));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputRaw_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row5Struct row31 = row5;
out23Struct out23 = new out23Struct();
row6Struct row6 = new row6Struct();
row3Struct row3 = new row3Struct();
out5Struct out5 = new out5Struct();
out5Struct row14 = out5;
out5Struct row7 = out5;
row2Struct row2 = new row2Struct();
row17Struct row17 = new row17Struct();
out24Struct out24 = new out24Struct();
row1Struct row1 = new row1Struct();
row4Struct row4 = new row4Struct();
out12Struct out12 = new out12Struct();
out12Struct row9 = out12;
row8Struct row8 = new row8Struct();
FormattedSentenceStruct FormattedSentence = new FormattedSentenceStruct();
WordsStruct Words = new WordsStruct();
out25Struct out25 = new out25Struct();
row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();
out18Struct out18 = new out18Struct();
out18Struct row12 = out18;
OutSentStruct OutSent = new OutSentStruct();


























	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tDBOutput_2 = 0;
		
	




int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;

String tableName_tDBOutput_2 = "WORD_SUMMARY";
boolean whetherReject_tDBOutput_2 = false;

       int batchSize_tDBOutput_2 = 10000;
       int batchSizeCounter_tDBOutput_2=0;
       int tmp_batchUpdateCount_tDBOutput_2 = 0;



java.sql.Connection conn_tDBOutput_2 = null;
    conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	    String insert_tDBOutput_2 = "INSERT INTO \"" + "WORD_SUMMARY" + "\" (\"WORD_CONTENT\",\"WORD_ORDER\",\"SYN_ID\",\"SENT_ID\",\"WORD_ID\") VALUES (?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out18");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"WORD_CONTENT","WORD_ORDER","SYN_ID","SENT_ID","WORD_ID",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out18Struct out18_tmp = new out18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tParseRecordSet_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tParseRecordSet_3", false);
		start_Hash.put("tParseRecordSet_3", System.currentTimeMillis());
		
	
	currentComponent="tParseRecordSet_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tParseRecordSet_3 = 0;
		

int nb_line_tParseRecordSet_3 = 0;
 



/**
 * [tParseRecordSet_3 begin ] stop
 */



	
	/**
	 * [tDBRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_4", false);
		start_Hash.put("tDBRow_4", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out25");
					}
				
		int tos_count_tDBRow_4 = 0;
		

	java.sql.Connection conn_tDBRow_4 = null;
	String query_tDBRow_4 = "";
	boolean whetherReject_tDBRow_4 = false;
				conn_tDBRow_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_4", conn_tDBRow_4);
        java.sql.Statement stmt_tDBRow_4 = conn_tDBRow_4.createStatement();
        resourceMap.put("stmt_tDBRow_4", stmt_tDBRow_4);

 



/**
 * [tDBRow_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Words");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out25Struct out25_tmp = new out25Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tNormalize_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_2", false);
		start_Hash.put("tNormalize_2", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"FormattedSentence");
					}
				
		int tos_count_tNormalize_2 = 0;
		

	int lastNoEmptyIndex_tNormalize_2 = 0;
    int nb_line_tNormalize_2 = 0;
        String tmp_tNormalize_2 = null;
        StringBuilder currentRecord_tNormalize_2 = null;
        String [] normalizeRecord_tNormalize_2 = null;
        java.util.Set<String> recordSet_tNormalize_2 = new java.util.HashSet<String>();
        
				if ( ((String)"\\ ").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
FormattedSentenceStruct FormattedSentence_tmp = new FormattedSentenceStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
	




int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "SENT_SUMMARY";
boolean whetherReject_tDBOutput_1 = false;

       int batchSize_tDBOutput_1 = 10000;
       int batchSizeCounter_tDBOutput_1=0;
       int tmp_batchUpdateCount_tDBOutput_1 = 0;



java.sql.Connection conn_tDBOutput_1 = null;
    conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	    String insert_tDBOutput_1 = "INSERT INTO \"" + "SENT_SUMMARY" + "\" (\"SENT_CONTENT\",\"SENT_ORDER\",\"SENT_ID\",\"DOC_ID\") VALUES (?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out12");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[4];

        public void addRow(String[] row) {

            for (int i = 0; i < 4; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 3 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"SENT_CONTENT","SENT_ORDER","SENT_ID","DOC_ID",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"OutSent");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<OutSentStruct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_AA_cortext_io_linux_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<OutSentStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out12Struct out12_tmp = new out12Struct();
OutSentStruct OutSent_tmp = new OutSentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tParseRecordSet_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tParseRecordSet_2", false);
		start_Hash.put("tParseRecordSet_2", System.currentTimeMillis());
		
	
	currentComponent="tParseRecordSet_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tParseRecordSet_2 = 0;
		

int nb_line_tParseRecordSet_2 = 0;
 



/**
 * [tParseRecordSet_2 begin ] stop
 */



	
	/**
	 * [tDBRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_3", false);
		start_Hash.put("tDBRow_3", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out24");
					}
				
		int tos_count_tDBRow_3 = 0;
		

	java.sql.Connection conn_tDBRow_3 = null;
	String query_tDBRow_3 = "";
	boolean whetherReject_tDBRow_3 = false;
				conn_tDBRow_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_3", conn_tDBRow_3);
        java.sql.Statement stmt_tDBRow_3 = conn_tDBRow_3.createStatement();
        resourceMap.put("stmt_tDBRow_3", stmt_tDBRow_3);

 



/**
 * [tDBRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out24Struct out24_tmp = new out24Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tNormalize_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_1", false);
		start_Hash.put("tNormalize_1", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tNormalize_1 = 0;
		

	int lastNoEmptyIndex_tNormalize_1 = 0;
    int nb_line_tNormalize_1 = 0;
        String tmp_tNormalize_1 = null;
        StringBuilder currentRecord_tNormalize_1 = null;
        String [] normalizeRecord_tNormalize_1 = null;
        java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();
        
				if ( ((String)"\\.").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_1 begin ] stop
 */



	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tDBRow_2 = 0;
		

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
				conn_tDBRow_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

 



/**
 * [tDBRow_2 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tSetGlobalVar_2 = 0;
		

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[3];

        public void addRow(String[] row) {

            for (int i = 0; i < 3; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 2 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"IDENTITY","DOC_ID","input",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tParseRecordSet_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tParseRecordSet_1", false);
		start_Hash.put("tParseRecordSet_1", System.currentTimeMillis());
		
	
	currentComponent="tParseRecordSet_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tParseRecordSet_1 = 0;
		

int nb_line_tParseRecordSet_1 = 0;
 



/**
 * [tParseRecordSet_1 begin ] stop
 */



	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out23");
					}
				
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out23Struct out23_tmp = new out23Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tFileInputRaw_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputRaw_1", false);
		start_Hash.put("tFileInputRaw_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputRaw_1";

	
		int tos_count_tFileInputRaw_1 = 0;
		
	

				try {					
					String content_tFileInputRaw_1 = org.apache.commons.io.FileUtils.readFileToString(new java.io.File("/home/ec2-user/cortext_io/cortext_io_input/input.txt"), "UTF-8");
					row5.content = content_tFileInputRaw_1;					
					globalMap.put("tFileInputRaw_1_FILENAME_PATH", "/home/ec2-user/cortext_io/cortext_io_input/input.txt");
				} catch (java.io.IOException e_tFileInputRaw_1) {
globalMap.put("tFileInputRaw_1_ERROR_MESSAGE",e_tFileInputRaw_1.getMessage());
					
					System.err.println(e_tFileInputRaw_1);
				}


 



/**
 * [tFileInputRaw_1 begin ] stop
 */
	
	/**
	 * [tFileInputRaw_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputRaw_1";

	

 


	tos_count_tFileInputRaw_1++;

/**
 * [tFileInputRaw_1 main ] stop
 */
	
	/**
	 * [tFileInputRaw_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputRaw_1";

	

 



/**
 * [tFileInputRaw_1 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

globalMap.put("LAST_SENT_ID", 0);
globalMap.put("LOGIC", 0);
globalMap.put("LANGUAGE_GLIA", 0);
globalMap.put("CONCEPT_COMPLIMENT", 0);
globalMap.put("EXISTENCE", 0);
globalMap.put("EXPRESSION", 0);
globalMap.put("SENTIMENT", 0);
globalMap.put("PHEN_COUNT", 0);
globalMap.put("OMENON", 0);
globalMap.put("COMMIT_SENT_ID", 0);

 
     row31 = row5;


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out23 = null;


// # Output table : 'out23'
out23_tmp.IDENTITY = "temp";
out23_tmp.input = " " + sentence_format.sent_sql_format((String)row31.content) ;
out23 = out23_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out23"
if(out23 != null) { 



	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out23"
						
						);
					}
					

		row6 = null;
		
query_tDBRow_1 = "SELECT \n  MAX(DOC_ID)+1 DOC_ID\nFROM DOC_SUMMARY";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
	java.sql.ResultSet rs_tDBRow_1 = null;
	
try {
		rs_tDBRow_1 = stmt_tDBRow_1.executeQuery(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
					row6 = new row6Struct();
					
							row6.ResultKey = rs_tDBRow_1;
							
							row6.IDENTITY = out23.IDENTITY;
							
							row6.input = out23.input;
							
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tParseRecordSet_1 main ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

	java.sql.ResultSet re_tParseRecordSet_1 = (java.sql.ResultSet)row6.ResultKey;
	boolean hasNextRecord_tParseRecordSet_1=false;
	String res_str_tParseRecordSet_1 = null;
	java.sql.Timestamp res_ts_tParseRecordSet_1 = null;
    while (true) {
	try{
		hasNextRecord_tParseRecordSet_1=re_tParseRecordSet_1.next();
	}catch(java.lang.Exception e_tParseRecordSet_1){
globalMap.put("tParseRecordSet_1_ERROR_MESSAGE",e_tParseRecordSet_1.getMessage());
		hasNextRecord_tParseRecordSet_1=false;
	}
	if (!hasNextRecord_tParseRecordSet_1) {
		break;
	}
	nb_line_tParseRecordSet_1++;	
		row3.IDENTITY = row6.IDENTITY;
	res_str_tParseRecordSet_1 = re_tParseRecordSet_1.getString("DOC_ID");
	if(res_str_tParseRecordSet_1!=null){
		row3.DOC_ID = ParserUtils.parseTo_int(res_str_tParseRecordSet_1.trim());
	}else{
		//row3.DOC_ID = ParserUtils.parseTo_int(res_str_tParseRecordSet_1);
		row3.DOC_ID = 0;		
	}
		row3.input = row6.input;




			

 


	tos_count_tParseRecordSet_1++;

/**
 * [tParseRecordSet_1 main ] stop
 */
	
	/**
	 * [tParseRecordSet_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";

	

 



/**
 * [tParseRecordSet_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.IDENTITY = row3.IDENTITY ;
out5_tmp.DOC_ID = row3.DOC_ID;
out5_tmp.input = row3.input ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[3];
   				
	    		if(out5.IDENTITY != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(out5.IDENTITY)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(out5.DOC_ID)			
					          ;	
										
    			   				
	    		if(out5.input != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(out5.input)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row14 = out5;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

globalMap.put("DOC_ID_2", row14.DOC_ID);

 
     row7 = row14;


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		row2 = null;
		
query_tDBRow_2 = "INSERT INTO DOC_SUMMARY (DOC_ID, \"IDENTITY\") VALUES \n(" + row7.DOC_ID + ",'" + row7.IDENTITY + "')";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
		stmt_tDBRow_2.execute(query_tDBRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_2_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_2) {
		
					row2 = new row2Struct();
					
							row2.IDENTITY = row7.IDENTITY;
							
							row2.DOC_ID = row7.DOC_ID;
							
							row2.input = row7.input;
							
	}
	

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tNormalize_1 main ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

            normalizeRecord_tNormalize_1 = new String[1];
            if(row2.input != null) {
				if("".equals(row2.input)){
		        	normalizeRecord_tNormalize_1[0] = "";
		        }else{
	                
	                    	normalizeRecord_tNormalize_1 = row2.input.split("\\.");
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_1=normalizeRecord_tNormalize_1.length;
	             	
	             		if(lastNoEmptyIndex_tNormalize_1 == 1 && "".equals(normalizeRecord_tNormalize_1[0])){
	             			lastNoEmptyIndex_tNormalize_1 = 0;
	             		}
	             	
            	
            	for(int i_tNormalize_1 = 0 ; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1 ; i_tNormalize_1++) {
		  			
	                currentRecord_tNormalize_1 = new StringBuilder();
	                nb_line_tNormalize_1++;               
	                
	                        	row17.IDENTITY = row2.IDENTITY;
	                        
	                        	row17.DOC_ID = row2.DOC_ID;
	                        
	                        	row17.input = normalizeRecord_tNormalize_1[i_tNormalize_1];
		                    

 


	tos_count_tNormalize_1++;

/**
 * [tNormalize_1 main ] stop
 */
	
	/**
	 * [tNormalize_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out24 = null;


// # Output table : 'out24'
out24_tmp.SENT_CONTENT = row17.input ;
out24_tmp.SENT_ORDER = Numeric.sequence("s_sent",1,1);
out24_tmp.SENT_ID = null;
out24_tmp.IDENTITY = row17.IDENTITY ;
out24_tmp.DOC_ID = row17.DOC_ID ;
out24 = out24_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out24"
if(out24 != null) { 



	
	/**
	 * [tDBRow_3 main ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out24"
						
						);
					}
					

		row1 = null;
		
query_tDBRow_3 = "SELECT \n  MAX(SENT_ID)+1 SENT_ID\nFROM SENT_SUMMARY";
whetherReject_tDBRow_3 = false;
globalMap.put("tDBRow_3_QUERY",query_tDBRow_3);
	java.sql.ResultSet rs_tDBRow_3 = null;
	
try {
		rs_tDBRow_3 = stmt_tDBRow_3.executeQuery(query_tDBRow_3);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_3 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_3_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_3) {
		
					row1 = new row1Struct();
					
							row1.ResultKey = rs_tDBRow_3;
							
							row1.SENT_CONTENT = out24.SENT_CONTENT;
							
							row1.SENT_ORDER = out24.SENT_ORDER;
							
							row1.SENT_ID = out24.SENT_ID;
							
							row1.IDENTITY = out24.IDENTITY;
							
							row1.DOC_ID = out24.DOC_ID;
							
	}
	

 


	tos_count_tDBRow_3++;

/**
 * [tDBRow_3 main ] stop
 */
	
	/**
	 * [tDBRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tParseRecordSet_2 main ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

	java.sql.ResultSet re_tParseRecordSet_2 = (java.sql.ResultSet)row1.ResultKey;
	boolean hasNextRecord_tParseRecordSet_2=false;
	String res_str_tParseRecordSet_2 = null;
	java.sql.Timestamp res_ts_tParseRecordSet_2 = null;
    while (true) {
	try{
		hasNextRecord_tParseRecordSet_2=re_tParseRecordSet_2.next();
	}catch(java.lang.Exception e_tParseRecordSet_2){
globalMap.put("tParseRecordSet_2_ERROR_MESSAGE",e_tParseRecordSet_2.getMessage());
		hasNextRecord_tParseRecordSet_2=false;
	}
	if (!hasNextRecord_tParseRecordSet_2) {
		break;
	}
	nb_line_tParseRecordSet_2++;	
		row4.SENT_CONTENT = row1.SENT_CONTENT;
		row4.SENT_ORDER = row1.SENT_ORDER;
	res_str_tParseRecordSet_2 = re_tParseRecordSet_2.getString("SENT_ID");
	if(res_str_tParseRecordSet_2!=null){
		row4.SENT_ID = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2.trim());
	}else{
		//row4.SENT_ID = ParserUtils.parseTo_Integer(res_str_tParseRecordSet_2);
		row4.SENT_ID = null;		
	}
		row4.IDENTITY = row1.IDENTITY;
		row4.DOC_ID = row1.DOC_ID;




			

 


	tos_count_tParseRecordSet_2++;

/**
 * [tParseRecordSet_2 main ] stop
 */
	
	/**
	 * [tParseRecordSet_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";

	

 



/**
 * [tParseRecordSet_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out12 = null;
OutSent = null;


// # Output table : 'out12'
out12_tmp.SENT_CONTENT = row4.SENT_CONTENT ;
out12_tmp.SENT_ORDER = row4.SENT_ORDER ;
out12_tmp.SENT_ID = Numeric.sequence("s_sent_commit",row4.SENT_ID,1);
out12_tmp.DOC_ID = row4.DOC_ID;
out12 = out12_tmp;

// # Output table : 'OutSent'
OutSent_tmp.SENT_CONTENT = row4.SENT_CONTENT ;
OutSent_tmp.SENT_ORDER = row4.SENT_ORDER ;
OutSent_tmp.SENT_ID = Numeric.sequence("s_sent_obj",row4.SENT_ID,1);
OutSent_tmp.DOC_ID = row4.DOC_ID;
OutSent_tmp.IDENTITY = row4.IDENTITY ;
OutSent = OutSent_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out12"
if(out12 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out12"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[4];
   				
	    		if(out12.SENT_CONTENT != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(out12.SENT_CONTENT)			
					          ;	
							
	    		} //			
    			   				
	    		if(out12.SENT_ORDER != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(out12.SENT_ORDER)			
					          ;	
							
	    		} //			
    			   				
	    		if(out12.SENT_ID != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(out12.SENT_ID)			
					          ;	
							
	    		} //			
    			   				
	    		if(out12.DOC_ID != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(out12.DOC_ID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row9 = out12;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					
	



            row8 = null;
        whetherReject_tDBOutput_1 = false;
                    if(row9.SENT_CONTENT == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row9.SENT_CONTENT);
}

                    if(row9.SENT_ORDER == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(2, row9.SENT_ORDER);
}

                    if(row9.SENT_ID == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(3, row9.SENT_ID);
}

                    if(row9.DOC_ID == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, row9.DOC_ID);
}


                       pstmt_tDBOutput_1.addBatch();
                       batchSizeCounter_tDBOutput_1++;
                       nb_line_tDBOutput_1++;
            if(!whetherReject_tDBOutput_1) {
                            row8 = new row8Struct();
                                row8.SENT_CONTENT = row9.SENT_CONTENT;
                                row8.SENT_ORDER = row9.SENT_ORDER;
                                row8.SENT_ID = row9.SENT_ID;
                                row8.DOC_ID = row9.DOC_ID;
            }
                if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                    int[] status_tDBOutput_1 = null;
                    int countSum_tDBOutput_1 = 0;
                    try {
                        batchSizeCounter_tDBOutput_1 = 0;
                        status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
                        for(int countEach_tDBOutput_1: status_tDBOutput_1) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                    }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                        for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                    }catch (java.sql.SQLException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1 ? tmp_batchUpdateCount_tDBOutput_1 : countSum_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
                        insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
               }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

FormattedSentence = null;


// # Output table : 'FormattedSentence'
// # Filter conditions 
if( 

row8.SENT_CONTENT != "" && row8.SENT_CONTENT!= null && row8.SENT_CONTENT.length() > 2

 ) {
FormattedSentence_tmp.SENT_CONTENT = sentence_format.word_object_format(sentence_format.add_period(row8.SENT_CONTENT)) ;
FormattedSentence_tmp.SENT_ORDER = row8.SENT_ORDER ;
FormattedSentence_tmp.SENT_ID = row8.SENT_ID ;
FormattedSentence_tmp.DOC_ID = row8.DOC_ID ;
FormattedSentence = FormattedSentence_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "FormattedSentence"
if(FormattedSentence != null) { 



	
	/**
	 * [tNormalize_2 main ] start
	 */

	

	
	
	currentComponent="tNormalize_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"FormattedSentence"
						
						);
					}
					

            normalizeRecord_tNormalize_2 = new String[1];
            if(FormattedSentence.SENT_CONTENT != null) {
				if("".equals(FormattedSentence.SENT_CONTENT)){
		        	normalizeRecord_tNormalize_2[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_2 = FormattedSentence.SENT_CONTENT.split("\\ ",-1);
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_2=normalizeRecord_tNormalize_2.length;
	             	
            	
            	for(int i_tNormalize_2 = 0 ; i_tNormalize_2 < lastNoEmptyIndex_tNormalize_2 ; i_tNormalize_2++) {
		  			
	                currentRecord_tNormalize_2 = new StringBuilder();
	                nb_line_tNormalize_2++;               
	                
	                        	Words.SENT_CONTENT = normalizeRecord_tNormalize_2[i_tNormalize_2];
		                    
	                        	Words.SENT_ORDER = FormattedSentence.SENT_ORDER;
	                        
	                        	Words.SENT_ID = FormattedSentence.SENT_ID;
	                        
	                        	Words.DOC_ID = FormattedSentence.DOC_ID;
	                        

 


	tos_count_tNormalize_2++;

/**
 * [tNormalize_2 main ] stop
 */
	
	/**
	 * [tNormalize_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_2";

	

 



/**
 * [tNormalize_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Words"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		
		              
			   	  		  if(
 				  		  			
 				  		  			(
 				  		  			
 				  		  			Words.SENT_CONTENT != "" && Words.SENT_CONTENT != null &&Words.SENT_CONTENT.length()>0
 				  		  			
 				  		  			)
  				  		  			
	  	  		  				) { // G_TM_M_280

							 // CALL close main tMap filter for table 'Words'
							// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out25 = null;


// # Output table : 'out25'
// # Filter conditions 
if( 

Words.SENT_CONTENT != "" && Words.SENT_CONTENT != null &&Words.SENT_CONTENT.length()>0

 ) {
out25_tmp.WORD_CONTENT = Words.SENT_CONTENT;
out25_tmp.WORD_ORDER = Numeric.sequence("s_word",1,1) ;
out25_tmp.SYN_ID = syn_summary.syn_search(Words.SENT_CONTENT) ;
out25_tmp.SENT_ID = Words.SENT_ID ;
out25_tmp.WORD_ID = 0;
out25 = out25_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out25"
if(out25 != null) { 



	
	/**
	 * [tDBRow_4 main ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out25"
						
						);
					}
					

		row10 = null;
		
query_tDBRow_4 = "SELECT \n  MAX(WORD_ID)+1 WORD_ID\nFROM WORD_SUMMARY";
whetherReject_tDBRow_4 = false;
globalMap.put("tDBRow_4_QUERY",query_tDBRow_4);
	java.sql.ResultSet rs_tDBRow_4 = null;
	
try {
		rs_tDBRow_4 = stmt_tDBRow_4.executeQuery(query_tDBRow_4);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_4 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_4_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_4) {
		
					row10 = new row10Struct();
					
							row10.ResultKey = rs_tDBRow_4;
							
							row10.WORD_CONTENT = out25.WORD_CONTENT;
							
							row10.WORD_ORDER = out25.WORD_ORDER;
							
							row10.SYN_ID = out25.SYN_ID;
							
							row10.SENT_ID = out25.SENT_ID;
							
							row10.WORD_ID = out25.WORD_ID;
							
	}
	

 


	tos_count_tDBRow_4++;

/**
 * [tDBRow_4 main ] stop
 */
	
	/**
	 * [tDBRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tParseRecordSet_3 main ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

	java.sql.ResultSet re_tParseRecordSet_3 = (java.sql.ResultSet)row10.ResultKey;
	boolean hasNextRecord_tParseRecordSet_3=false;
	String res_str_tParseRecordSet_3 = null;
	java.sql.Timestamp res_ts_tParseRecordSet_3 = null;
    while (true) {
	try{
		hasNextRecord_tParseRecordSet_3=re_tParseRecordSet_3.next();
	}catch(java.lang.Exception e_tParseRecordSet_3){
globalMap.put("tParseRecordSet_3_ERROR_MESSAGE",e_tParseRecordSet_3.getMessage());
		hasNextRecord_tParseRecordSet_3=false;
	}
	if (!hasNextRecord_tParseRecordSet_3) {
		break;
	}
	nb_line_tParseRecordSet_3++;	
		row11.WORD_CONTENT = row10.WORD_CONTENT;
		row11.WORD_ORDER = row10.WORD_ORDER;
		row11.SYN_ID = row10.SYN_ID;
		row11.SENT_ID = row10.SENT_ID;
	res_str_tParseRecordSet_3 = re_tParseRecordSet_3.getString("WORD_ID");
	if(res_str_tParseRecordSet_3!=null){
		row11.WORD_ID = ParserUtils.parseTo_int(res_str_tParseRecordSet_3.trim());
	}else{
		//row11.WORD_ID = ParserUtils.parseTo_int(res_str_tParseRecordSet_3);
		row11.WORD_ID = 0;		
	}




			

 


	tos_count_tParseRecordSet_3++;

/**
 * [tParseRecordSet_3 main ] stop
 */
	
	/**
	 * [tParseRecordSet_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_3";

	

 



/**
 * [tParseRecordSet_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out18 = null;


// # Output table : 'out18'
out18_tmp.WORD_CONTENT = row11.WORD_CONTENT ;
out18_tmp.WORD_ORDER = row11.WORD_ORDER ;
out18_tmp.SYN_ID = row11.SYN_ID ;
out18_tmp.SENT_ID = row11.SENT_ID ;
out18_tmp.WORD_ID = Numeric.sequence("s_word_2",row11.WORD_ID,1);
out18 = out18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out18"
if(out18 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out18"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[5];
   				
	    		if(out18.WORD_CONTENT != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(out18.WORD_CONTENT)			
					          ;	
							
	    		} //			
    			   				
	    		if(out18.WORD_ORDER != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(out18.WORD_ORDER)			
					          ;	
							
	    		} //			
    			   				
	    		if(out18.SYN_ID != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(out18.SYN_ID)			
					          ;	
							
	    		} //			
    			   				
	    		if(out18.SENT_ID != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(out18.SENT_ID)			
					          ;	
							
	    		} //			
    			   				
	    		if(out18.WORD_ID != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(out18.WORD_ID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     row12 = out18;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					
	



        whetherReject_tDBOutput_2 = false;
                    if(row12.WORD_CONTENT == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, row12.WORD_CONTENT);
}

                    if(row12.WORD_ORDER == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(2, row12.WORD_ORDER);
}

                    if(row12.SYN_ID == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(3, row12.SYN_ID);
}

                    if(row12.SENT_ID == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(4, row12.SENT_ID);
}

                    if(row12.WORD_ID == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(5, row12.WORD_ID);
}


                       pstmt_tDBOutput_2.addBatch();
                       batchSizeCounter_tDBOutput_2++;
                       nb_line_tDBOutput_2++;
                if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                    int[] status_tDBOutput_2 = null;
                    int countSum_tDBOutput_2 = 0;
                    try {
                        batchSizeCounter_tDBOutput_2 = 0;
                        status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
                        for(int countEach_tDBOutput_2: status_tDBOutput_2) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                    }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                        for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
                    }catch (java.sql.SQLException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2 ? tmp_batchUpdateCount_tDBOutput_2 : countSum_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
                        insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
               }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "out18"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tParseRecordSet_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_3";

	

 



/**
 * [tParseRecordSet_3 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tDBRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

 



/**
 * [tDBRow_4 process_data_end ] stop
 */

} // End of branch "out25"



	
		} // G_TM_M_280 close main tMap filter for table 'Words'
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_2";

	

 



/**
 * [tNormalize_2 process_data_end ] stop
 */

} // End of branch "FormattedSentence"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "out12"




// Start of branch "OutSent"
if(OutSent != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"OutSent"
						
						);
					}
					



    
		OutSentStruct oneRow_tHashOutput_1 = new OutSentStruct();
				
					oneRow_tHashOutput_1.SENT_CONTENT = OutSent.SENT_CONTENT;
					oneRow_tHashOutput_1.SENT_ORDER = OutSent.SENT_ORDER;
					oneRow_tHashOutput_1.SENT_ID = OutSent.SENT_ID;
					oneRow_tHashOutput_1.DOC_ID = OutSent.DOC_ID;
					oneRow_tHashOutput_1.IDENTITY = OutSent.IDENTITY;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "OutSent"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tParseRecordSet_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";

	

 



/**
 * [tParseRecordSet_2 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tDBRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

 



/**
 * [tDBRow_3 process_data_end ] stop
 */

} // End of branch "out24"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tParseRecordSet_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";

	

 



/**
 * [tParseRecordSet_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */

} // End of branch "out23"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputRaw_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputRaw_1";

	

 



/**
 * [tFileInputRaw_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputRaw_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputRaw_1";

	



 

ok_Hash.put("tFileInputRaw_1", true);
end_Hash.put("tFileInputRaw_1", System.currentTimeMillis());




/**
 * [tFileInputRaw_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out23");
			  	}
			  	
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */

	
	/**
	 * [tParseRecordSet_1 end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";

	

globalMap.put("tParseRecordSet_1_NB_LINE",nb_line_tParseRecordSet_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tParseRecordSet_1", true);
end_Hash.put("tParseRecordSet_1", System.currentTimeMillis());




/**
 * [tParseRecordSet_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());




/**
 * [tSetGlobalVar_2 end ] stop
 */

	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

	
        stmt_tDBRow_2.close();
        resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
    resourceMap.put("finish_tDBRow_2", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */

	
	/**
	 * [tNormalize_1 end ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

    globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tNormalize_1", true);
end_Hash.put("tNormalize_1", System.currentTimeMillis());




/**
 * [tNormalize_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBRow_3 end ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

	
        stmt_tDBRow_3.close();
        resourceMap.remove("stmt_tDBRow_3");
    resourceMap.put("statementClosed_tDBRow_3", true);
    resourceMap.put("finish_tDBRow_3", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out24");
			  	}
			  	
 

ok_Hash.put("tDBRow_3", true);
end_Hash.put("tDBRow_3", System.currentTimeMillis());




/**
 * [tDBRow_3 end ] stop
 */

	
	/**
	 * [tParseRecordSet_2 end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";

	

globalMap.put("tParseRecordSet_2_NB_LINE",nb_line_tParseRecordSet_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tParseRecordSet_2", true);
end_Hash.put("tParseRecordSet_2", System.currentTimeMillis());




/**
 * [tParseRecordSet_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out12");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	




                    int[] status_tDBOutput_1 = null;
                    int countSum_tDBOutput_1 = 0;
                    try {
                        if(pstmt_tDBOutput_1!=null && batchSizeCounter_tDBOutput_1 > 0 ){
                            status_tDBOutput_1 = pstmt_tDBOutput_1.executeBatch();
                            for(int countEach_tDBOutput_1: status_tDBOutput_1) {
                                countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                        for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_1!=null && batchSizeCounter_tDBOutput_1 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
                        }catch (java.sql.SQLException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());

                        }
                        tmp_batchUpdateCount_tDBOutput_1 = tmp_batchUpdateCount_tDBOutput_1 > countSum_tDBOutput_1 ? tmp_batchUpdateCount_tDBOutput_1 : countSum_tDBOutput_1;
                        rowsToCommitCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
                            insertedCount_tDBOutput_1 += tmp_batchUpdateCount_tDBOutput_1;
                    }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	int rejectedCount_tDBOutput_1 = 0;
	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tNormalize_2 end ] start
	 */

	

	
	
	currentComponent="tNormalize_2";

	

    globalMap.put("tNormalize_2_NB_LINE", nb_line_tNormalize_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"FormattedSentence");
			  	}
			  	
 

ok_Hash.put("tNormalize_2", true);
end_Hash.put("tNormalize_2", System.currentTimeMillis());




/**
 * [tNormalize_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Words");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBRow_4 end ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

	
        stmt_tDBRow_4.close();
        resourceMap.remove("stmt_tDBRow_4");
    resourceMap.put("statementClosed_tDBRow_4", true);
    resourceMap.put("finish_tDBRow_4", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out25");
			  	}
			  	
 

ok_Hash.put("tDBRow_4", true);
end_Hash.put("tDBRow_4", System.currentTimeMillis());




/**
 * [tDBRow_4 end ] stop
 */

	
	/**
	 * [tParseRecordSet_3 end ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_3";

	

globalMap.put("tParseRecordSet_3_NB_LINE",nb_line_tParseRecordSet_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tParseRecordSet_3", true);
end_Hash.put("tParseRecordSet_3", System.currentTimeMillis());




/**
 * [tParseRecordSet_3 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out18");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	




                    int[] status_tDBOutput_2 = null;
                    int countSum_tDBOutput_2 = 0;
                    try {
                        if(pstmt_tDBOutput_2!=null && batchSizeCounter_tDBOutput_2 > 0 ){
                            status_tDBOutput_2 = pstmt_tDBOutput_2.executeBatch();
                            for(int countEach_tDBOutput_2: status_tDBOutput_2) {
                                countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
                        for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
                            countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tDBOutput_2!=null && batchSizeCounter_tDBOutput_2 > 0 ){
                        try {
                            tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
                        }catch (java.sql.SQLException e){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());

                        }
                        tmp_batchUpdateCount_tDBOutput_2 = tmp_batchUpdateCount_tDBOutput_2 > countSum_tDBOutput_2 ? tmp_batchUpdateCount_tDBOutput_2 : countSum_tDBOutput_2;
                        rowsToCommitCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
                            insertedCount_tDBOutput_2 += tmp_batchUpdateCount_tDBOutput_2;
                    }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	int rejectedCount_tDBOutput_2 = 0;
	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */































	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"OutSent");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */










































				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputRaw_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBCommit_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputRaw_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputRaw_1";

	

 



/**
 * [tFileInputRaw_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */

	
	/**
	 * [tParseRecordSet_1 finally ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_1";

	

 



/**
 * [tParseRecordSet_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */

	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";

	

    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */

	
	/**
	 * [tNormalize_1 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_1";

	

 



/**
 * [tNormalize_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBRow_3 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_3";

	

    if (resourceMap.get("statementClosed_tDBRow_3") == null) {
            java.sql.Statement stmtToClose_tDBRow_3 = null;
            if ((stmtToClose_tDBRow_3 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_3")) != null) {
                stmtToClose_tDBRow_3.close();
            }
    }
 



/**
 * [tDBRow_3 finally ] stop
 */

	
	/**
	 * [tParseRecordSet_2 finally ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_2";

	

 



/**
 * [tParseRecordSet_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tNormalize_2 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_2";

	

 



/**
 * [tNormalize_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBRow_4 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_4";

	

    if (resourceMap.get("statementClosed_tDBRow_4") == null) {
            java.sql.Statement stmtToClose_tDBRow_4 = null;
            if ((stmtToClose_tDBRow_4 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_4")) != null) {
                stmtToClose_tDBRow_4.close();
            }
    }
 



/**
 * [tDBRow_4 finally ] stop
 */

	
	/**
	 * [tParseRecordSet_3 finally ] start
	 */

	

	
	
	currentComponent="tParseRecordSet_3";

	

 



/**
 * [tParseRecordSet_3 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */































	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */










































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputRaw_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBCommit_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_2", false);
		start_Hash.put("tDBCommit_2", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_2";

	
		int tos_count_tDBCommit_2 = 0;
		

 



/**
 * [tDBCommit_2 begin ] stop
 */
	
	/**
	 * [tDBCommit_2 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

	java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_2.commit();
			
	
		}finally{
			
			conn_tDBCommit_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_2++;

/**
 * [tDBCommit_2 main ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_2 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 

ok_Hash.put("tDBCommit_2", true);
end_Hash.put("tDBCommit_2", System.currentTimeMillis());




/**
 * [tDBCommit_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBCommit_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_2 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_2";

	

 



/**
 * [tDBCommit_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String subjects;

				public String getSubjects () {
					return this.subjects;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.subjects = this.subjects;
	            other.SENT_ID = this.SENT_ID;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.subjects = readString(dis);
					
						this.SENT_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.subjects = readString(dis);
					
						this.SENT_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subjects,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.subjects,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subjects="+subjects);
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out22Struct implements routines.system.IPersistableRow<out22Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String subjects;

				public String getSubjects () {
					return this.subjects;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SENT_ID == null) ? 0 : this.SENT_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out22Struct other = (out22Struct) obj;
		
						if (this.SENT_ID == null) {
							if (other.SENT_ID != null)
								return false;
						
						} else if (!this.SENT_ID.equals(other.SENT_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out22Struct other) {

		other.subjects = this.subjects;
	            other.SENT_ID = this.SENT_ID;
	            
	}

	public void copyKeysDataTo(out22Struct other) {

		other.SENT_ID = this.SENT_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.subjects = readString(dis);
					
						this.SENT_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.subjects = readString(dis);
					
						this.SENT_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subjects,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.subjects,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subjects="+subjects);
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SENT_ID, other.SENT_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux = new byte[0];
    static byte[] commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[0];

	
			    public String SENT_CONTENT;

				public String getSENT_CONTENT () {
					return this.SENT_CONTENT;
				}
				
			    public Integer SENT_ORDER;

				public Integer getSENT_ORDER () {
					return this.SENT_ORDER;
				}
				
			    public Integer SENT_ID;

				public Integer getSENT_ID () {
					return this.SENT_ID;
				}
				
			    public Integer DOC_ID;

				public Integer getDOC_ID () {
					return this.DOC_ID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length) {
				if(length < 1024 && commonByteArray_INTEGRALMASS_AA_cortext_io_linux.length == 0) {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[1024];
				} else {
   					commonByteArray_INTEGRALMASS_AA_cortext_io_linux = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length);
			strReturn = new String(commonByteArray_INTEGRALMASS_AA_cortext_io_linux, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_INTEGRALMASS_AA_cortext_io_linux) {

        	try {

        		int length = 0;
		
					this.SENT_CONTENT = readString(dis);
					
						this.SENT_ORDER = readInteger(dis);
					
						this.SENT_ID = readInteger(dis);
					
						this.DOC_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SENT_CONTENT,dos);
					
					// Integer
				
						writeInteger(this.SENT_ORDER,dos);
					
					// Integer
				
						writeInteger(this.SENT_ID,dos);
					
					// Integer
				
						writeInteger(this.DOC_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SENT_CONTENT="+SENT_CONTENT);
		sb.append(",SENT_ORDER="+String.valueOf(SENT_ORDER));
		sb.append(",SENT_ID="+String.valueOf(SENT_ID));
		sb.append(",DOC_ID="+String.valueOf(DOC_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();
out22Struct out22 = new out22Struct();
row21Struct row21 = new row21Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_AA_cortext_io_linux_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tNormalize_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tNormalize_3", false);
		start_Hash.put("tNormalize_3", System.currentTimeMillis());
		
	
	currentComponent="tNormalize_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out22");
					}
				
		int tos_count_tNormalize_3 = 0;
		

	int lastNoEmptyIndex_tNormalize_3 = 0;
    int nb_line_tNormalize_3 = 0;
        String tmp_tNormalize_3 = null;
        StringBuilder currentRecord_tNormalize_3 = null;
        String [] normalizeRecord_tNormalize_3 = null;
        java.util.Set<String> recordSet_tNormalize_3 = new java.util.HashSet<String>();
        
				if ( ((String)"@").length() == 0 ){
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				

 



/**
 * [tNormalize_3 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out22Struct out22_tmp = new out22Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<OutSentStruct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_AA_cortext_io_linux_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<OutSentStruct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    OutSentStruct next_tHashInput_2 = iterator_tHashInput_2.next();

	row19.SENT_CONTENT = next_tHashInput_2.SENT_CONTENT;
	row19.SENT_ORDER = next_tHashInput_2.SENT_ORDER;
	row19.SENT_ID = next_tHashInput_2.SENT_ID;
	row19.DOC_ID = next_tHashInput_2.DOC_ID;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		
		              
			   	  		  if(
 				  		  			
 				  		  			(
 				  		  			
 				  		  			row19.SENT_CONTENT != "" && row19.SENT_CONTENT != null && row19.SENT_CONTENT.length() > 2&&row19.SENT_CONTENT!="\b"&&row19.SENT_CONTENT!="\t"&&row19.SENT_CONTENT!="\n"&&row19.SENT_CONTENT!="\f"&&row19.SENT_CONTENT!="\r"
 				  		  			
 				  		  			)
  				  		  			
	  	  		  				) { // G_TM_M_280

							 // CALL close main tMap filter for table 'row19'
							// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out22 = null;


// # Output table : 'out22'
// # Filter conditions 
if( 

row19.SENT_CONTENT != "" && row19.SENT_CONTENT != null && row19.SENT_CONTENT.length() > 2&&row19.SENT_CONTENT!="\b"&&row19.SENT_CONTENT!="\t"&&row19.SENT_CONTENT!="\n"&&row19.SENT_CONTENT!="\f"&&row19.SENT_CONTENT!="\r"

 ) {
out22_tmp.subjects = sentence_subj_linux.extract_subj(row19.SENT_CONTENT, row19.SENT_ID) ;
out22_tmp.SENT_ID = row19.SENT_ID ;
out22 = out22_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out22"
if(out22 != null) { 



	
	/**
	 * [tNormalize_3 main ] start
	 */

	

	
	
	currentComponent="tNormalize_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out22"
						
						);
					}
					

            normalizeRecord_tNormalize_3 = new String[1];
            if(out22.subjects != null) {
				if("".equals(out22.subjects)){
		        	normalizeRecord_tNormalize_3[0] = "";
		        }else{
	                
	                		normalizeRecord_tNormalize_3 = out22.subjects.split("@",-1);
	                        
                }           
            }
             		lastNoEmptyIndex_tNormalize_3=normalizeRecord_tNormalize_3.length;
	             	
            	
            	for(int i_tNormalize_3 = 0 ; i_tNormalize_3 < lastNoEmptyIndex_tNormalize_3 ; i_tNormalize_3++) {
		  			
	                currentRecord_tNormalize_3 = new StringBuilder();
	                nb_line_tNormalize_3++;               
	                
	                        	row21.subjects = normalizeRecord_tNormalize_3[i_tNormalize_3];
		                    
	                        	row21.SENT_ID = out22.SENT_ID;
	                        

 


	tos_count_tNormalize_3++;

/**
 * [tNormalize_3 main ] stop
 */
	
	/**
	 * [tNormalize_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tNormalize_3";

	

 



/**
 * [tNormalize_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					



    
		row21Struct oneRow_tHashOutput_2 = new row21Struct();
				
					oneRow_tHashOutput_2.subjects = row21.subjects;
					oneRow_tHashOutput_2.SENT_ID = row21.SENT_ID;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */
		// end for
	}



	
	/**
	 * [tNormalize_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tNormalize_3";

	

 



/**
 * [tNormalize_3 process_data_end ] stop
 */

} // End of branch "out22"



	
		} // G_TM_M_280 close main tMap filter for table 'row19'
	
	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_AA_cortext_io_linux_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tNormalize_3 end ] start
	 */

	

	
	
	currentComponent="tNormalize_3";

	

    globalMap.put("tNormalize_3_NB_LINE", nb_line_tNormalize_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out22");
			  	}
			  	
 

ok_Hash.put("tNormalize_3", true);
end_Hash.put("tNormalize_3", System.currentTimeMillis());




/**
 * [tNormalize_3 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tNormalize_3 finally ] start
	 */

	

	
	
	currentComponent="tNormalize_3";

	

 



/**
 * [tNormalize_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		


	
		String url_tDBConnection_2 = "jdbc:sqlite:" + "/" + "/home/ec2-user/cortext_io/cortext_io_db/cortext_io.db"; 
	String dbUser_tDBConnection_2 = null;
	
	
		String dbPwd_tDBConnection_2 = null;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
					String driverClass_tDBConnection_2 = "org.sqlite.JDBC";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
		conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}


 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBCommit_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_3", false);
		start_Hash.put("tDBCommit_3", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_3";

	
		int tos_count_tDBCommit_3 = 0;
		

 



/**
 * [tDBCommit_3 begin ] stop
 */
	
	/**
	 * [tDBCommit_3 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

	java.sql.Connection conn_tDBCommit_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBCommit_3 != null && !conn_tDBCommit_3.isClosed())
	{
	
		try{
	
			
			conn_tDBCommit_3.commit();
			
	
		}finally{
			
			conn_tDBCommit_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    }
	
	}

 


	tos_count_tDBCommit_3++;

/**
 * [tDBCommit_3 main ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_3 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 

ok_Hash.put("tDBCommit_3", true);
end_Hash.put("tDBCommit_3", System.currentTimeMillis());




/**
 * [tDBCommit_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_3 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_3";

	

 



/**
 * [tDBCommit_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final AA_cortext_io_linux AA_cortext_io_linuxClass = new AA_cortext_io_linux();

        int exitCode = AA_cortext_io_linuxClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = AA_cortext_io_linux.class.getClassLoader().getResourceAsStream("integralmass/aa_cortext_io_linux_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = AA_cortext_io_linux.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("EMAIL", "id_String");
                        if(context.getStringValue("EMAIL") == null) {
                            context.EMAIL = null;
                        } else {
                            context.EMAIL=(String) context.getProperty("EMAIL");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("EMAIL")) {
                context.EMAIL = (String) parentContextMap.get("EMAIL");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tSystem_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tSystem_1) {
globalMap.put("tSystem_1_SUBPROCESS_STATE", -1);

e_tSystem_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : AA_cortext_io_linux");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     376924 characters generated by Talend Open Studio for Data Integration 
 *     on the June 21, 2022 at 5:40:53 AM MST
 ************************************************************************************************/