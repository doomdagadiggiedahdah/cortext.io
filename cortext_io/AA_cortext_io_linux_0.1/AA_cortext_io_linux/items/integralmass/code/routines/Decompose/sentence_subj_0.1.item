package routines;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 * The sentence_subj class extracts and processes subjects from text input.
 * It identifies capitalized words as potential subjects and categorizes text into
 * subjects, concepts, and syntactic relations based on a set of rules.
 * 
 * This class provides Natural Language Processing capabilities focusing on:
 * 1. Identifying capitalized words as named entities or subjects
 * 2. Filtering common words using a predefined set of stop words
 * 3. Organizing sentence components in a chronological tree structure
 * 4. Persisting parsed data to a database for further analysis
 */
public class sentence_subj {

    /**
     * Extracts subjects from a given sentence and persists them to a database.
     * 
     * The method follows these steps:
     * 1. Initialize a set of common words/stop words to ignore when determining subjects
     * 2. Split the sentence into individual words
     * 3. Process each word to identify subjects (capitalized words) and concepts
     * 4. Store each identified component with its positional information
     * 5. Persist the processed data to a database
     * 
     * @param sent The input sentence to be processed
     * @param sent_id A unique identifier for the sentence
     * @return A string containing all identified subjects delimited by '@'
     */
    public static String extract_subj(String sent, int sent_id) {
        
        // Timestamp for logging purposes
        java.util.Date date = new java.util.Date();
        Timestamp time_stamp = new Timestamp(date.getTime());
        String time = time_stamp.toString();
        
        // Initialize a set of common words/stop words to filter out
        HashSet<String> ref_logic = new HashSet<String>();
        
        ref_logic.add("and");
        ref_logic.add("or");
        ref_logic.add("in");
        ref_logic.add("the");
        ref_logic.add("to");
        ref_logic.add("for");
        ref_logic.add("of");
        ref_logic.add("a");
        ref_logic.add("an");
        ref_logic.add("any");
        ref_logic.add("another");
        ref_logic.add("other");
        ref_logic.add("what");
        ref_logic.add("whats");
        ref_logic.add("who");
        ref_logic.add("why");
        ref_logic.add("Y");
        ref_logic.add("O");
        // Spanish stop words
        ref_logic.add("en");
        ref_logic.add("el");
        ref_logic.add("los");
        ref_logic.add("la");
        ref_logic.add("las");
        ref_logic.add("a");
        ref_logic.add("por");
        ref_logic.add("para");
        ref_logic.add("de");
        ref_logic.add("desde");
        ref_logic.add("un");
        ref_logic.add("uno");
        ref_logic.add("unos");
        ref_logic.add("una");
        ref_logic.add("unas");
        ref_logic.add("alguna");
        ref_logic.add("otro");
        ref_logic.add("que");
        ref_logic.add("como");
        ref_logic.add("cual");
        ref_logic.add("porque");
        ref_logic.add("se");
        ref_logic.add("no");
        
        // Helper for word capitalization detection
        word_format c_words = new word_format();
        
        // Output string to collect all subjects
        String full_subj = "";

        // Split the input sentence into individual words
        String[] word = sent.split("\\ ");

        // Variables to track subjects and state
        String subj = "";        // Current subject being built
        String subj_2 = "";      // Previously completed subject
        String subj_3 = "";      // Temporary storage for subject processing
        boolean upp = false;     // Flag for capitalized words
        
        // State tracker: -1 = no previous word, 0 = previous word is capitalized, 
        // 1 = previous word is a logic word following a capitalized word
        // >1 = multiple consecutive logic words
        int b = -1;
        
        // Temporary storage for concept words (non-subject, non-relation words)
        String concept = "";
        
        // Word counter for logging
        int wordInt = 0;
        
        // Logging section start
        System.out.println("--------------------------------------------");
        System.out.println("----------------" + time + "----------------");
        System.out.println("--------------------------------------------");
        
        // TreeMap to maintain the chronological order of identified components
        // Key: position in the original text, Value: component data
        TreeMap<Integer, phen_phen> tree = new TreeMap<Integer, phen_phen>();
        
        // Position tracker for tree insertion
        int treeIndex = -1;
        
        // Main processing loop - iterate through each word in the sentence
        for (int word_order = 0; word_order < word.length; word_order++) {
            
            wordInt++;
            
            System.out.println("Word number " + wordInt + " of " + word.length);
            
            // Initial syntactic ID is 0 (no syntactic relation)
            int syn_id = 0;
            
            // Word cleaning and normalization process
            // Remove multiple spaces
            String new_word_8 = word[word_order].replaceAll("\\s\\s\\s\\s", "");
            String new_word_7 = new_word_8.replaceAll("\\s\\s\\s", "");
            String new_word_6 = new_word_7.replaceAll("\\s\\s", "");
            String new_word_5 = new_word_6.replaceAll("\\s", "");
            
            // Remove all non-alphanumeric characters
            String new_word_4 = new_word_5.replaceAll("[^A-Za-z0-9 ]", "");
            
            // Additional cleanup for edge cases
            String new_word_3 = new_word_4.replaceAll("\\s[^A-Za-z0-9 ]", "");
            String new_word_2 = new_word_3.replaceAll("[^A-Za-z0-9 ]\\s", "");
            String new_word = new_word_2.replaceAll("\\s[^A-Za-z0-9 ]\\s", "");
            
            // Check if word is capitalized, only if it's not empty
            if (new_word != null && new_word.length() > 0) {
                upp = c_words.cap_word(new_word);  // Check if first letter is capitalized
            }
            
            // CASE 1: Current word is capitalized (potential subject)
            if (upp == true) {
                
                // If we have a concept buffer, commit it first before processing the subject
                if (concept != "") {
                    if (concept != null && concept.length() > 1) {
                        // Store the concept in the tree at its original position
                        treeIndex = sent.indexOf(concept.substring(1));
                        
                        // If position not found, append at the end
                        if (treeIndex == -1 && !tree.isEmpty())
                            treeIndex = tree.lastKey() + 1;
                        
                        // Add to the tree with concept type (0, 0, 0, 1)
                        tree.put(treeIndex, new phen_phen(sent_id, concept.substring(1), 0, 0, 0, 1));
                    }
                    concept = "";  // Clear concept buffer
                }
               
                // Add current capitalized word to subject buffer
                subj = subj + new_word + " ";
                
                // If this is the last word in the sentence, finalize the subject
                if (word_order == word.length - 1) {
                    // Remove trailing space
                    subj = subj.substring(0, subj.length() - 1);
                    // Add to output with delimiter
                    full_subj = full_subj + "@" + subj;
                    
                    // Store in tree if valid
                    if (subj != null && subj.length() > 1) {
                        treeIndex = sent.indexOf(subj);
                        
                        if (treeIndex == -1 && !tree.isEmpty())
                            treeIndex = tree.lastKey() + 1;
                        
                        // Add to tree with subject type (0, 1, 0, 0)
                        tree.put(treeIndex, new phen_phen(sent_id, subj, 0, 1, 0, 0));
                    }
                    
                    subj = "";  // Clear subject buffer
                }
                // Set state: previous word is capitalized
                b = 0;
            }
            // CASE 2: Current word is NOT capitalized
            else {
                // Sub-case 2.1: Previous word was capitalized (b=0)
                if (b == 0) {
                    
                    // Process any pending concept
                    if (concept != "") {
                        if (concept != null && concept.length() > 1) {
                            treeIndex = sent.indexOf(concept.substring(1));
                            
                            if (treeIndex == -1 && !tree.isEmpty())
                                treeIndex = tree.lastKey() + 1;
                            
                            tree.put(treeIndex, new phen_phen(sent_id, concept.substring(1), 0, 0, 0, 1));
                        }
                        concept = "";
                    }
                    
                    // Store current subject buffer for processing
                    subj_2 = subj;
                    
                    // If last word in sentence, finalize the subject
                    if (word_order == word.length - 1 && subj != "" && subj != null && subj.length() > 0) {
                        full_subj = full_subj + "@" + subj_2;
                        
                        if (subj_2 != null && subj_2.length() > 1) {
                            treeIndex = sent.indexOf(subj_2);
                            
                            if (treeIndex == -1 && !tree.isEmpty())
                                treeIndex = tree.lastKey() + 1;
                            
                            tree.put(treeIndex, new phen_phen(sent_id, subj_2, 0, 1, 0, 0));
                        }
                        
                        subj = "";
                        b = -1;  // Reset state - no active subject
                    }
                    
                    // If not the last word and the current word is valid
                    if (word_order != word.length - 1 && new_word != null && new_word != "" && new_word.length() > 0) {
                        // Check if current word is a common/stop word
                        if (ref_logic.contains(new_word)) {
                            // If it's a stop word, add it to the subject
                            // (allows for subjects like "United States of America")
                            subj = subj + new_word + " ";
                            b++;  // Increment state counter
                        } 
                        // If not a stop word and we have a subject buffer
                        else if (!ref_logic.contains(new_word) && subj_2 != "") {
                            // Finalize the current subject
                            full_subj = full_subj + "@" + subj_2;
                            
                            if (subj_2 != null && subj_2.length() > 1) {
                                treeIndex = sent.indexOf(subj_2);
                                
                                if (treeIndex == -1 && !tree.isEmpty())
                                    treeIndex = tree.lastKey() + 1;
                                
                                tree.put(treeIndex, new phen_phen(sent_id, subj_2, 0, 1, 0, 0));
                            }
                            
                            subj = "";  // Clear subject buffer
                            b = -1;     // Reset state
                        }
                    }
                }
                // Sub-case 2.2: Previous word was a stop word after a capitalized word (b=1)
                else if (b == 1) {
                    // If current word is a stop word and valid
                    if (ref_logic.contains(new_word) && new_word != null && new_word != "" && new_word.length() > 0) {
                        
                        // Process any pending concept
                        if (concept != "") {
                            if (concept != null && concept.length() > 1) {
                                treeIndex = sent.indexOf(concept.substring(1));
                                
                                if (treeIndex == -1 && !tree.isEmpty())
                                    treeIndex = tree.lastKey() + 1;
                                
                                tree.put(treeIndex, new phen_phen(sent_id, concept.substring(1), 0, 0, 0, 1));
                            }
                            concept = "";
                        }
                        
                        // Continue building the subject with this stop word
                        subj = subj + new_word + " ";
                        b++;  // Increment state counter
                    }
                    // If not a stop word and we have valid buffers
                    else if (!ref_logic.contains(new_word) && new_word != "" && subj != "" && subj != null && subj.length() > 0) {
                        // Finalize the subject
                        full_subj = full_subj + "@" + subj_2;
                        
                        if (subj_2 != null && subj_2.length() > 1) {
                            treeIndex = sent.indexOf(subj_2);
                            
                            if (treeIndex == -1 && !tree.isEmpty())
                                treeIndex = tree.lastKey() + 1;
                            
                            tree.put(treeIndex, new phen_phen(sent_id, subj_2, 0, 1, 0, 0));
                        }
                        
                        subj = "";  // Clear subject buffer
                        b = 0;      // Reset state to 0 (not -1) - important for state machine
                    }
                }
                // Sub-case 2.3: Multiple consecutive stop words after capitalized (b>1)
                else if (b > 1) {
                    // If we have valid buffers
                    if (subj != "" && subj != null && subj.length() > 0 && new_word != "" && subj_2 != "" && subj_2.length() > 0) {
                        // Process the subject, removing trailing space
                        subj_3 = subj_2.substring(0, subj_2.length() - 1);
                        full_subj = full_subj + "@" + subj_2;
                        
                        if (subj_2 != null && subj_2.length() > 1) {
                            treeIndex = sent.indexOf(subj_2);
                            
                            if (treeIndex == -1 && tree != null)
                                treeIndex = tree.lastKey() + 1;
                            
                            tree.put(treeIndex, new phen_phen(sent_id, subj_2, 0, 1, 0, 0));
                        }
                        
                        subj = "";  // Clear subject buffer
                        b++;        // Increment state counter
                    }
                }
                
                // Check if word is a syntactic relation
                syn_id = connect_phen_sqlite.syn_search_word(new_word);
                
                // If it's a syntactic relation, add it to the tree
                if (syn_id != 0) {
                    if (new_word != null && new_word.length() > 1) {
                        treeIndex = sent.indexOf(new_word);
                        
                        if (treeIndex == -1 && !tree.isEmpty())
                            treeIndex = tree.lastKey() + 1;
                        
                        // Add to tree with syntactic relation type (syn_id, 0, 0, 0)
                        tree.put(treeIndex, new phen_phen(sent_id, new_word, syn_id, 0, 0, 0));
                    }
                }
                
                // If not a syntactic relation, add to concept buffer
                if (syn_id == 0) {
                    concept += " " + new_word;
                }
                
                // If we found a syntactic relation or reached end of sentence,
                // process any pending concept
                if ((syn_id != 0 && concept != "") || (word_order == word.length - 1 && concept != "")) {
                    treeIndex = sent.indexOf(concept.substring(1));
                    
                    if (treeIndex == -1 && !tree.isEmpty())
                        treeIndex = tree.lastKey() + 1;
                    
                    tree.put(treeIndex, new phen_phen(sent_id, concept.substring(1), 0, 0, 0, 1));
                    
                    concept = "";  // Clear concept buffer
                }
            }
            
            // Clean up temporary variables to prevent memory leaks
            new_word = null;
            new_word_2 = null;
            new_word_3 = null;
            new_word_4 = null;
            new_word_5 = null;
            new_word_6 = null;
            new_word_7 = null;
            new_word_8 = null;
        }
        
        // Process the tree in chronological order and persist to database
        for (Map.Entry<Integer, phen_phen> entry : tree.entrySet()) {
            phen_phen phenValue = entry.getValue();
            
            // Store valid entries in the database
            if (phenValue.phen != null && phenValue.phen != "" && phenValue.phen.length() > 0)
                connect_phen_sqlite.phen_summary(phenValue.sent_id, phenValue.phen, phenValue.syn_id, 
                                              phenValue.subj_summary_id, phenValue.concept_id);
        }
        
        // Clean up all resources
        ref_logic.clear();
        word = null;
        subj = null;
        subj_2 = null;
        subj_3 = null;
        tree.clear();
        concept = null;
        
        // Return the concatenated subjects, removing the leading delimiter if present
        if (full_subj != "") {
            return full_subj.substring(1);
        } else {
            return full_subj;
        }
    }
    
    /**
     * Generates all possible combinations of words in a subject phrase.
     * This is useful for entity recognition and subject classification.
     * 
     * @param subj The subject phrase to process
     * @return A string containing all word combinations delimited by '@'
     */
    public static String subj_unit(String subj) {
        
        String subj_unit = "";
       
        // Helper for combinatorial processing
        perm_comb perm = new perm_comb();
        
        // Generate all combinations of words in the subject
        List<String> subj_combo = new ArrayList<String>();
        subj_combo = perm.concept_word_comb(subj);
        
        /* 
         * NOTE: The commented block below appears to be legacy code for
         * generating subject codes and storing them in a database.
         * It's kept for historical reference but not currently used.
         */
        
        // Add each combination to the result string
        for (String subj_combo_unit : subj_combo) {
            subj_unit = subj_unit + "@" + subj_combo_unit;
        }
        
        // Remove the leading delimiter and return
        return subj_unit.substring(1);
    }
}